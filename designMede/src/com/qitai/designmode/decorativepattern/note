装饰模式：动态的将责任委托给对象，用于功能的扩展

以《headfirst设计模式》中的星巴兹咖啡店为应用场景，不同的咖啡的价格不一样，顾客可自己决定添加调料
如果以咖啡为父类采用继承，那么所有子类都将重写cost()方法计算账单，当需要新添加某一种调料或者价格变动时将会难以维护
所以以咖啡为基类，以各种调料装饰，依赖委托

新加入某一种调料，只需要新建一个实现Beverage的调料类即可，在下订单的时候动态添加调料包装饮料。
某一种调料价格变动也只需要修改对应的类即可。

装饰类和被装饰类是一种包裹的关系，装饰了一层层的包裹着被装饰者。

装饰者不利于对于特定的某一种被装饰对象进行改变，因为一旦被装饰类型就被改变了。比如说针对某一种咖啡打折，就不便实现

比如Java I/O库，许多类都是装饰InputStream类。

结构型设计模式