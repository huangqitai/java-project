迭代器模式：定义了顺序访问某一个聚合对象的各个元素的方法，而不暴露聚合对象遍历的底层实现。
迭代器模式属于行为型模式

比如说数组的遍历和ArrayList的遍历方式是不一样的，java本身的迭代器Iterator提供了ArrayList的遍历，
数据则可以自己实现Iterator接口，实现自己的迭代器，提供取得迭代器的方法以及遍历元素的方法
将行为责任交给迭代器而不是集合本身，隐藏集合遍历的底层实现。

以《headfirst设计模式》的菜单为例，有两份菜单，一份是ArrayList实现的，一份是数组实现的，
现在需要将两份菜单一起遍历。

无论是ArrayList等提供的iterator()方法获取的迭代器，还是自己实现Iterator接口实现的迭代器，
都是迭代器模式的设计，将元素的遍历交给迭代器，只提供遍历元素的方法。

迭代器我们在各种集合使用中普遍使用到，只是在学迭代器模式之前，不知道它就是迭代器模式的设计实例
迭代器模式除了已经内置了使用java.util.Iterator接口的集合，可根据各种聚合对象来写自己的迭代器

例中的Menu接口是聚合对象的公用的接口，这样可以遵循针对接口编程，使使用聚合对象的类与聚合对象的实现类解耦
MenuItem是元素，BreakfastMenu和LunchMenu都是聚合对象，BreakfastMenu使用ArrayList存储元素
LunchMenu使用数组，使用java中的迭代器或者实现自己的迭代器都是迭代器模式的使用。
