在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。
这种类型的设计模式属于行为型模式。

在策略模式中，我们创建表示各种策略的对象（鸭子例中的fly,飞行行为）和一个行为随着策略对象改变而改变的context对象（鸭子）
策略对象改变 context 对象的执行算法。

当使用setFly动态设置了鸭子的飞行行为，鸭子的飞行就根据fly对象改变了执行的算法。

策略模式定义：将算法族(行为)独立封装，独立于使用算法的对象，是各算法族之间可以相互替换。

 比如说角色格斗游戏，每个角色拥有多个武器，而同时只能使用一把武器，此时就可以设计一个角色父类，
 一个武器接口，使用策略模式设置不同角色拥有不同的武器，而且通过set方法可以动态变换武器
